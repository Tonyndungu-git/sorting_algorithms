#include "sort.h"

/**
 * swap - function that swaps two integer values
 * @a: first integer
 * @b: second integer
 * Return: void
 */

void swap(int *a, int *b)
{

	int temp;

	temp = *a;
	*a = *b;
	*b = temp;

}

/**
 * partition - function that partitions an array
 * @array: array to be partitioned
 * @low: lowest index of the partition being sorted
 * @high: highest index of the partition being sorted
 * @size: size of the array
 * Return: index of the pivot element
 */

int partition(int *array, int low, int high, size_t size)
{
	int pivot = array[high];
	int i = low -1;
	int j;

	for (j = low; j < high; j++)
	{
		if (array[j] < pivot)
		{

			i++;
			if (i != j)
			{
				swap(&array[i], &array[j]);
				print_array(array, size);

			}

		}

	}
	if (array[high] < array[i +1])
	{
		swap(&array[i + 1], &array[high]);
		print_array(array, size);
	}
	return (i + 1);

}

/**
 * quickalg - function that sorts an array of integers using quicksort algorithm
 * @array: array to be sorted
 * @low: lowest index of the partition being sorted
 * @high: highest index of the partition being sorted
 * @size: size of the array
 * Return: void
 */

void quickalg(int *array, int low, int high, size_t size)
{
	int pivot_index;

	if (low < high)
	{
		pivot_index = partition(array, low, high, size);
		quickalg(array, low, pivot_index - 1, size);
		quickalg(array, pivot_index + 1, high, size);

	}
}

/**
 * quick_sort - function that sorts an array of integers using quicksort alg.
 * @array: array to be sorted
 * @size: size of the array
 * Return: void
 */


void quick_sort(int *array, size_t size)
{



	if (array && size > 1)
	{

		quickalg(array, 0, size - 1, size);
	}
}
